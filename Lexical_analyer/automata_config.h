#pragma once

static constexpr size_t VALUE_POS = 0;
static constexpr size_t IS_FINAL_POS = 1;
static constexpr size_t TRANSITION_POS = 2;

static constexpr uint8_t TRANSITION_ERROR = 254;

static constexpr uint8_t SLASH_POS = 23;
static constexpr uint8_t COMMENT_START_POS_LINE = 126;
static constexpr uint8_t COMMENT_START_POS_MULTIPLE = 127;

static constexpr uint8_t DUMMY_NODE_VALUE = 255;

const std::vector<std::vector<uint8_t>> automata_config{	//States must be defined in order.
	//value	IsFinal {symbol state}+
	{0, 0, '\'', 1, '"', 5, '0', 9, 'N', 10 , '+', 15, '-', 16, '<', 17, '>', 18, '*', 19, '%', 19, '~', 19, '^', 19, '!', 19, '=', 19, '&', 21, '|', 22, '/', 23, 'W', 25, 'a', 26, 'b', 30, 'c', 35, 'd', 50, 'e', 60, 'f', 69, 'g', 74, 'i', 77, 'l', 79, 'r', 82, 's', 91, 't', 110, 'u', 115, 'v', 118, 'w', 124, ',', 125, ';', 125, '.', 125, '(', 125, ')', 125, '[', 125, ']', 125, '{', 125, '}', 125},
	{1, 0, '$', 2, '\\', 3 },
	{2, 0, '\'', 4},
	{3, 0, '$', 2},
	{4, 1},	// constant final state
	{5, 0, '\\', 6, '$', 7},
	{6, 0, '$', 7 },
	{7, 0, '\\', 6, '$', 7, '"', 8},
	{8, 1},	//constant final state
	{9, 1, '.', 11, 'N', 12, 'x', 13, 'X', 13},	//constant final state
	{10, 1, 'N', 10, '.', 11},	//constant final state
	{11, 0, 'N', 12},
	{12, 1, 'N', 12},	//constant final state
	//hex
	{13, 0, 'a', 14, 'b', 14, 'c', 14, 'd', 14, 'e', 14, 'f', 14, 'A', 14, 'B', 14, 'C', 14, 'D', 14, 'E', 14, 'F', 14, 'N', 14},
	{14, 1, 'a', 14, 'b', 14, 'c', 14, 'd', 14, 'e', 14, 'f', 14, 'A', 14, 'B', 14, 'C', 14, 'D', 14, 'E', 14, 'F', 14, 'N', 14},	//constant final state
	//Operators
	{15, 1, '=', 20, '+', 20},	// +
	{16, 1, '=', 20, '-', 20, '>', 125},	// -
	{17, 1, '<', 19, '=', 20},	// <
	{18, 1, '>', 19, '=', 20},	// >
	{19, 1, '=', 20},	//=	
	{20, 1},	//operator final state
	{21, 1, '=', 20, '&', 20},	// &
	{22, 1, '=', 20, '|', 20},	// |
	{23, 1, '=', 20, '/', COMMENT_START_POS_LINE, '*', COMMENT_START_POS_MULTIPLE},
	//Identifiers
	//{24, 1, 'W', 25},
	{25, 1, 'W', 25, 'N', 25},
	//Keywords
	//auto
	{26, 1, 'u', 27, 'W', 25, 'N', 25},
	//{, 1, '', , 'W', 25, 'N', 25},
	{27, 1, 't', 28, 'W', 25, 'N', 25},
	{28, 1, 'o', 29, 'W', 25, 'N', 25},
	{29, 1, 'W', 25, 'N', 25},	//Keyword final state.
	//break
	{30, 1, 'r', 31, 'W', 25, 'N', 25},
	{31, 1, 'e', 32, 'W', 25, 'N', 25},
	{32, 1, 'a', 33, 'W', 25, 'N', 25},
	{33, 1, 'k', 29, 'W', 25, 'N', 25},
	{34, 1, 'W', 25, 'N', 25},	//Keyword final state "break"
	//case/char/const/continue
	{35, 1, 'a', 36, 'h', 39, 'o', 42, 'W', 25, 'N', 25},
	{36, 1, 's', 37, 'W', 25, 'N', 25},
	{37, 1, 'e', 29, 'W', 25, 'N', 25},
	{38, 1, 'W', 25, 'N', 25},	//Keyword final state "case"
	//char
	{39, 1, 'a', 40, 'W', 25, 'N', 25},
	{40, 1, 'r', 29, 'W', 25, 'N', 25},
	{41, 1, 'W', 25, 'N', 25},	//Keyword final state "char"
	//const
	{42, 1, 'n', 43, 'W', 25, 'N', 25},
	{43, 1, 's', 44, 't', 46, 'W', 25, 'N', 25},
	{44, 1, 't', 29, 'W', 25, 'N', 25},
	{45, 1, 'W', 25, 'N', 25},	//Keyword final state "const"
	//continue
	{46, 1, 'i', 47, 'W', 25, 'N', 25},
	{47, 1, 'n', 48, 'W', 25, 'N', 25},
	{48, 1, 'u', 49, 'W', 25, 'N', 25},
	{49, 1, 'e', 29, 'W', 25, 'N', 25},
	//default/do/double
	{50, 1, 'e', 51, 'o', 56, 'W', 25, 'N', 25},
	{51, 1, 'f', 52, 'W', 25, 'N', 25},
	{52, 1, 'a', 53, 'W', 25, 'N', 25},
	{53, 1, 'u', 54, 'W', 25, 'N', 25},
	{54, 1, 'l', 55, 'W', 25, 'N', 25},
	{55, 1, 't', 29, 'W', 25, 'N', 25},
	//double
	{56, 1, 'u', 57, 'W', 25, 'N', 25},	//Keyword final state "do" !!!!!!!!!
	{57, 1, 'b', 58, 'W', 25, 'N', 25},
	{58, 1, 'l', 59, 'W', 25, 'N', 25},
	{59, 1, 'e', 29, 'W', 25, 'N', 25},
	//else/enum/extern
	{60, 1, 'l', 61, 'n', 63, 'x', 65, 'W', 25, 'N', 25},
	{61, 1, 's', 62, 'W', 25, 'N', 25},
	{62, 1, 'e', 29, 'W', 25, 'N', 25},
	//enum
	{63, 1, 'u', 64, 'W', 25, 'N', 25},
	{64, 1, 'm', 29, 'W', 25, 'N', 25},
	//extern
	{65, 1, 't', 66, 'W', 25, 'N', 25},
	{66, 1, 'e', 67, 'W', 25, 'N', 25},
	{67, 1, 'r', 68, 'W', 25, 'N', 25},
	{68, 1, 'n', 29, 'W', 25, 'N', 25},
	//float/for
	{69, 1, 'l', 70, 'o', 73, 'W', 25, 'N', 25},
	{70, 1, 'o', 71, 'W', 25, 'N', 25},
	{71, 1, 'a', 72, 'W', 25, 'N', 25},
	{72, 1, 't', 29, 'W', 25, 'N', 25},
	//for
	{73, 1, 'r', 29, 'W', 25, 'N', 25},
	//goto
	{74, 1, 'o', 75, 'W', 25, 'N', 25},
	{75, 1, 't', 76, 'W', 25, 'N', 25},
	{76, 1, 'o', 29, 'W', 25, 'N', 25},
	//if/int
	{77, 1, 'f', 29, 'n', 78, 'W', 25, 'N', 25},
	//int
	{78, 1, 't', 29, 'W', 25, 'N', 25},
	//long
	{79, 1, 'o', 80, 'W', 25, 'N', 25 },
	{80, 1, 'n', 81, 'W', 25, 'N', 25 },
	{81, 1, 'g', 29, 'W', 25, 'N', 25 },
	//register/return
	{82, 1, 'e', 83, 'W', 25, 'N', 25 },
	{83, 1, 'g', 84, 't', 89, 'W', 25, 'N', 25 },
	{84, 1, 'i', 85, 'W', 25, 'N', 25 },
	{85, 1, 's', 86, 'W', 25, 'N', 25 },
	{86, 1, 't', 87, 'W', 25, 'N', 25 },
	{87, 1, 'e', 88, 'W', 25, 'N', 25 },
	{88, 1, 'r', 29, 'W', 25, 'N', 25 },
	//return
	{89, 1, 'u', 90, 'W', 25, 'N', 25 },
	{90, 1, 'r', 68, 'W', 25, 'N', 25 },
	//"short","signed","sizeof","static","struct","switch",
	{91, 1, 'h', 92, 'i', 94, 't', 100, 'w', 106, 'W', 25, 'N', 25 },
	{92 , 1, 'o', 93, 'W', 25, 'N', 25 },
	{93, 1, 'r', 78, 'W', 25, 'N', 25 },
	//signed
	{94, 1, 'g', 95, 'z', 98, 'W', 25, 'N', 25 },
	{95, 1, 'n', 96, 'W', 25, 'N', 25 },
	{96, 1, 'e', 97, 'W', 25, 'N', 25 },
	{97, 1, 'd', 29, 'W', 25, 'N', 25 },
	//sizeof
	{98, 1, 'e', 99, 'W', 25, 'N', 25 },
	{99, 1, 'o', 77, 'W', 25, 'N', 25 },
	//static
	{100, 1, 'a', 101, 'r', 104, 'W', 25, 'N', 25 },
	{101, 1, 't', 102, 'W', 25, 'N', 25 },
	{102, 1, 'i', 103, 'W', 25, 'N', 25 },
	{103, 1, 'c', 29, 'W', 25, 'N', 25 },
	//struct
	{104, 1, 'u', 105, 'W', 25, 'N', 25 },
	{105, 1, 'c', 78, 'W', 25, 'N', 25 },
	//switch
	{106, 1, 'i', 107, 'W', 25, 'N', 25 },
	{107, 1, 't', 108, 'W', 25, 'N', 25 },
	{108, 1, 'c', 109, 'W', 25, 'N', 25 },
	{109, 1, 'h', 29, 'W', 25, 'N', 25 },
	//typedef
	{110, 1, 'y', 111, 'W', 25, 'N', 25 },
	{111, 1, 'p', 112, 'W', 25, 'N', 25 },
	{112, 1, 'e', 113, 'W', 25, 'N', 25 },
	{113, 1, 'd', 114, 'W', 25, 'N', 25 },
	{114, 1, 'e', 77, 'W', 25, 'N', 25 },
	//union/unsigned
	{115, 1, 'n', 116, 'W', 25, 'N', 25 },
	{116, 1, 'i', 117, 's', 91, 'W', 25, 'N', 25 },	//can jump to signed
	{117, 1, 'o', 68, 'W', 25, 'N', 25 },
	//void/volatile
	{118, 1, 'o', 119, 'W', 25, 'N', 25 },
	{119, 1, 'i', 97, 'l', 120, 'W', 25, 'N', 25 },
	{120, 1, 'a', 121, 'W', 25, 'N', 25 },
	{121, 1, 't', 122, 'W', 25, 'N', 25 },
	{122, 1, 'i', 123, 'W', 25, 'N', 25 },
	{123, 1, 'l', 59, 'W', 25, 'N', 25 },
	//while
	{124, 1, 'h', 122, 'W', 25, 'N', 25 },
	//Separators
	{125, 1},	//Separator final state
	//comment handling
	{COMMENT_START_POS_LINE, 1, '$', COMMENT_START_POS_LINE},
	{COMMENT_START_POS_MULTIPLE, 1, '$', COMMENT_START_POS_MULTIPLE, '*', COMMENT_START_POS_MULTIPLE + 1},
	{COMMENT_START_POS_MULTIPLE + 1, 1, '$', COMMENT_START_POS_MULTIPLE, '/', 0}

	//254(TRANSITION_ERROR) is reserved.
	//{DUMMY_NODE_VALUE, 0}
	//255(DUMMY_NODE_VALUE) is reserved.
};